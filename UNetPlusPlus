import torch
import torch.nn as nn
import torch.nn.functional as F

class DoubleConv(nn.Module):


    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

class Up(nn.Module):


    def __init__(self, in_channels, out_channels, bilinear=True):
        super().__init__()

        if bilinear:
            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
            self.conv = DoubleConv(in_channels, out_channels)
        else:
            self.up = nn.ConvTranspose2d(in_channels , out_channels, kernel_size=2, stride=2)
            self.conv = DoubleConv(in_channels, out_channels)

    def forward(self, x1, x2):
        x1 = self.up(x1)
        diffY = x2.size()[2] - x1.size()[2]
        diffX = x2.size()[3] - x1.size()[3]

        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
                        diffY // 2, diffY - diffY // 2])

        x = torch.cat([x2, x1], dim=1)
        return self.conv(x)

class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)

class UNetPlusPlus(nn.Module):
    def __init__(self, n_channels, n_classes, bilinear=True):
        super(UNetPlusPlus, self).__init__()
        self.n_channels = n_channels
        self.n_classes = n_classes
        self.bilinear = bilinear


        self.inc = DoubleConv(n_channels, 64//8)        
        self.down1 = nn.MaxPool2d(2)
        self.conv1 = DoubleConv(64//8, 128//8)         
        self.down2 = nn.MaxPool2d(2)
        self.conv2 = DoubleConv(128//8, 256//8)       
        self.down3 = nn.MaxPool2d(2)
        self.conv3 = DoubleConv(256//8, 512//8)         
        self.down4 = nn.MaxPool2d(2)
        self.conv4 = DoubleConv(512//8, 1024//8)        


        self.up1 = Up(1024//8 + 512//8, 512//8, bilinear)   
        self.up2 = Up(512//8 + 256//8, 256//8, bilinear)     
        self.up3 = Up(256//8 + 128//8, 128//8, bilinear)     
        self.up4 = Up(128//8 + 64//8, 64//8, bilinear)        

        self.outc = OutConv(64//8, n_classes)

    def forward(self, x):

        x1 = self.inc(x)       
        x2 = self.down1(x1)    
        x2 = self.conv1(x2)     
        x3 = self.down2(x2)    
        x3 = self.conv2(x3)    
        x4 = self.down3(x3)    
        x4 = self.conv3(x4)     
        x5 = self.down4(x4)     
        x5 = self.conv4(x5)     


        x = self.up1(x5, x4)    
        x = self.up2(x, x3)     
        x = self.up3(x, x2)     
        x = self.up4(x, x1)     
        logits = self.outc(x)   
        return logits
